// autogenerated by structGenerator. DO NOT EDIT.
package ext4

import "encoding/binary"
import "io"
import "strings"
import "fmt"

type BlockGroupDescriptor [64]byte

func (t BlockGroupDescriptor) BlockBitmapLo() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *BlockGroupDescriptor) SetBlockBitmapLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t BlockGroupDescriptor) InodeBitmapLo() uint32 {
	return binary.LittleEndian.Uint32(t[4:8])
}
func (t *BlockGroupDescriptor) SetInodeBitmapLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[4:8], val)
	return true
}
func (t BlockGroupDescriptor) InodeTableLo() uint32 {
	return binary.LittleEndian.Uint32(t[8:12])
}
func (t *BlockGroupDescriptor) SetInodeTableLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[8:12], val)
	return true
}
func (t BlockGroupDescriptor) FreeBlocksCountLo() uint16 {
	return binary.LittleEndian.Uint16(t[12:14])
}
func (t *BlockGroupDescriptor) SetFreeBlocksCountLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[12:14], val)
	return true
}
func (t BlockGroupDescriptor) FreeInodesCountLo() uint16 {
	return binary.LittleEndian.Uint16(t[14:16])
}
func (t *BlockGroupDescriptor) SetFreeInodesCountLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[14:16], val)
	return true
}
func (t BlockGroupDescriptor) UsedDirsCountLo() uint16 {
	return binary.LittleEndian.Uint16(t[16:18])
}
func (t *BlockGroupDescriptor) SetUsedDirsCountLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[16:18], val)
	return true
}
func (t BlockGroupDescriptor) Flags() uint16 {
	return binary.LittleEndian.Uint16(t[18:20])
}
func (t *BlockGroupDescriptor) SetFlags(val uint16) bool {
	binary.LittleEndian.PutUint16(t[18:20], val)
	return true
}
func (t BlockGroupDescriptor) ExcludeBitmapLo() uint32 {
	return binary.LittleEndian.Uint32(t[20:24])
}
func (t *BlockGroupDescriptor) SetExcludeBitmapLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[20:24], val)
	return true
}
func (t BlockGroupDescriptor) BlockBitmapCsumLo() uint16 {
	return binary.LittleEndian.Uint16(t[24:26])
}
func (t *BlockGroupDescriptor) SetBlockBitmapCsumLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[24:26], val)
	return true
}
func (t BlockGroupDescriptor) InodeBitmapCsumLo() uint16 {
	return binary.LittleEndian.Uint16(t[26:28])
}
func (t *BlockGroupDescriptor) SetInodeBitmapCsumLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[26:28], val)
	return true
}
func (t BlockGroupDescriptor) ItableUnusedLo() uint16 {
	return binary.LittleEndian.Uint16(t[28:30])
}
func (t *BlockGroupDescriptor) SetItableUnusedLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[28:30], val)
	return true
}
func (t BlockGroupDescriptor) Checksum() uint16 {
	return binary.LittleEndian.Uint16(t[30:32])
}
func (t *BlockGroupDescriptor) SetChecksum(val uint16) bool {
	binary.LittleEndian.PutUint16(t[30:32], val)
	return true
}
func (t BlockGroupDescriptor) BlockBitmapHi() uint32 {
	return binary.LittleEndian.Uint32(t[32:36])
}
func (t *BlockGroupDescriptor) SetBlockBitmapHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[32:36], val)
	return true
}
func (t BlockGroupDescriptor) InodeBitmapHi() uint32 {
	return binary.LittleEndian.Uint32(t[36:40])
}
func (t *BlockGroupDescriptor) SetInodeBitmapHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[36:40], val)
	return true
}
func (t BlockGroupDescriptor) InodeTableHi() uint32 {
	return binary.LittleEndian.Uint32(t[40:44])
}
func (t *BlockGroupDescriptor) SetInodeTableHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[40:44], val)
	return true
}
func (t BlockGroupDescriptor) FreeBlocksCountHi() uint16 {
	return binary.LittleEndian.Uint16(t[44:46])
}
func (t *BlockGroupDescriptor) SetFreeBlocksCountHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[44:46], val)
	return true
}
func (t BlockGroupDescriptor) FreeInodesCountHi() uint16 {
	return binary.LittleEndian.Uint16(t[46:48])
}
func (t *BlockGroupDescriptor) SetFreeInodesCountHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[46:48], val)
	return true
}
func (t BlockGroupDescriptor) UsedDirsCountHi() uint16 {
	return binary.LittleEndian.Uint16(t[48:50])
}
func (t *BlockGroupDescriptor) SetUsedDirsCountHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[48:50], val)
	return true
}
func (t BlockGroupDescriptor) ItableUnusedHi() uint16 {
	return binary.LittleEndian.Uint16(t[50:52])
}
func (t *BlockGroupDescriptor) SetItableUnusedHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[50:52], val)
	return true
}
func (t BlockGroupDescriptor) ExcludeBitmapHi() uint32 {
	return binary.LittleEndian.Uint32(t[52:56])
}
func (t *BlockGroupDescriptor) SetExcludeBitmapHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[52:56], val)
	return true
}
func (t BlockGroupDescriptor) BlockBitmapCsumHi() uint16 {
	return binary.LittleEndian.Uint16(t[56:58])
}
func (t *BlockGroupDescriptor) SetBlockBitmapCsumHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[56:58], val)
	return true
}
func (t BlockGroupDescriptor) InodeBitmapCsumHi() uint16 {
	return binary.LittleEndian.Uint16(t[58:60])
}
func (t *BlockGroupDescriptor) SetInodeBitmapCsumHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[58:60], val)
	return true
}
func (t BlockGroupDescriptor) Reserved() uint32 {
	return binary.LittleEndian.Uint32(t[60:64])
}
func (t *BlockGroupDescriptor) SetReserved(val uint32) bool {
	binary.LittleEndian.PutUint32(t[60:64], val)
	return true
}
func (t BlockGroupDescriptor) BlockBitmap() uint64 {
	return join_uint32_uint32(t.BlockBitmapLo(), t.BlockBitmapHi())
}
func (t *BlockGroupDescriptor) SetBlockBitmap(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetBlockBitmapLo(a)
	t.SetBlockBitmapHi(b)
	return true
}
func (t BlockGroupDescriptor) InodeBitmap() uint64 {
	return join_uint32_uint32(t.InodeBitmapLo(), t.InodeBitmapHi())
}
func (t *BlockGroupDescriptor) SetInodeBitmap(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetInodeBitmapLo(a)
	t.SetInodeBitmapHi(b)
	return true
}
func (t BlockGroupDescriptor) InodeTable() uint64 {
	return join_uint32_uint32(t.InodeTableLo(), t.InodeTableHi())
}
func (t *BlockGroupDescriptor) SetInodeTable(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetInodeTableLo(a)
	t.SetInodeTableHi(b)
	return true
}
func (t BlockGroupDescriptor) FreeBlocksCount() uint32 {
	return join_uint16_uint16(t.FreeBlocksCountLo(), t.FreeBlocksCountHi())
}
func (t *BlockGroupDescriptor) SetFreeBlocksCount(val uint32) bool {
	var a, b = split_uint16_uint16(val)
	t.SetFreeBlocksCountLo(a)
	t.SetFreeBlocksCountHi(b)
	return true
}
func (t BlockGroupDescriptor) FreeInodesCount() uint32 {
	return join_uint16_uint16(t.FreeInodesCountLo(), t.FreeInodesCountHi())
}
func (t *BlockGroupDescriptor) SetFreeInodesCount(val uint32) bool {
	var a, b = split_uint16_uint16(val)
	t.SetFreeInodesCountLo(a)
	t.SetFreeInodesCountHi(b)
	return true
}
func (t BlockGroupDescriptor) UsedDirsCount() uint32 {
	return join_uint16_uint16(t.UsedDirsCountLo(), t.UsedDirsCountHi())
}
func (t *BlockGroupDescriptor) SetUsedDirsCount(val uint32) bool {
	var a, b = split_uint16_uint16(val)
	t.SetUsedDirsCountLo(a)
	t.SetUsedDirsCountHi(b)
	return true
}
func (t BlockGroupDescriptor) Size() int64 {
	return 64
}
func (t BlockGroupDescriptor) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *BlockGroupDescriptor) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t BlockGroupDescriptor) String() string {
	return strings.Join([]string{"BlockGroupDescriptor{", fmt.Sprintf("block_bitmap_lo=%v", t.BlockBitmapLo()), fmt.Sprintf("inode_bitmap_lo=%v", t.InodeBitmapLo()), fmt.Sprintf("inode_table_lo=%v", t.InodeTableLo()), fmt.Sprintf("free_blocks_count_lo=%v", t.FreeBlocksCountLo()), fmt.Sprintf("free_inodes_count_lo=%v", t.FreeInodesCountLo()), fmt.Sprintf("used_dirs_count_lo=%v", t.UsedDirsCountLo()), fmt.Sprintf("flags=%v", t.Flags()), fmt.Sprintf("exclude_bitmap_lo=%v", t.ExcludeBitmapLo()), fmt.Sprintf("block_bitmap_csum_lo=%v", t.BlockBitmapCsumLo()), fmt.Sprintf("inode_bitmap_csum_lo=%v", t.InodeBitmapCsumLo()), fmt.Sprintf("itable_unused_lo=%v", t.ItableUnusedLo()), fmt.Sprintf("checksum=%v", t.Checksum()), fmt.Sprintf("block_bitmap_hi=%v", t.BlockBitmapHi()), fmt.Sprintf("inode_bitmap_hi=%v", t.InodeBitmapHi()), fmt.Sprintf("inode_table_hi=%v", t.InodeTableHi()), fmt.Sprintf("free_blocks_count_hi=%v", t.FreeBlocksCountHi()), fmt.Sprintf("free_inodes_count_hi=%v", t.FreeInodesCountHi()), fmt.Sprintf("used_dirs_count_hi=%v", t.UsedDirsCountHi()), fmt.Sprintf("itable_unused_hi=%v", t.ItableUnusedHi()), fmt.Sprintf("exclude_bitmap_hi=%v", t.ExcludeBitmapHi()), fmt.Sprintf("block_bitmap_csum_hi=%v", t.BlockBitmapCsumHi()), fmt.Sprintf("inode_bitmap_csum_hi=%v", t.InodeBitmapCsumHi()), fmt.Sprintf("reserved=%v", t.Reserved()), "}"}, " ")
}

type DirEntry2 [8]byte

func (t DirEntry2) Inode() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *DirEntry2) SetInode(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t DirEntry2) RecLen() uint16 {
	return binary.LittleEndian.Uint16(t[4:6])
}
func (t *DirEntry2) SetRecLen(val uint16) bool {
	binary.LittleEndian.PutUint16(t[4:6], val)
	return true
}
func (t DirEntry2) NameLen() uint8 {
	return t[6:7][0]
}
func (t *DirEntry2) SetNameLen(val uint8) bool {
	t[6:7][0] = val
	return true
}
func (t DirEntry2) FileType() uint8 {
	return t[7:8][0]
}
func (t *DirEntry2) SetFileType(val uint8) bool {
	t[7:8][0] = val
	return true
}
func (t DirEntry2) Size() int64 {
	return 8
}
func (t DirEntry2) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *DirEntry2) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t DirEntry2) String() string {
	return strings.Join([]string{"DirEntry2{", fmt.Sprintf("inode=%v", t.Inode()), fmt.Sprintf("rec_len=%v", t.RecLen()), fmt.Sprintf("name_len=%v", t.NameLen()), fmt.Sprintf("file_type=%v", t.FileType()), "}"}, " ")
}

type ExtentTreeHeader [12]byte

func (t ExtentTreeHeader) Magic() uint16 {
	return binary.LittleEndian.Uint16(t[0:2])
}
func (t *ExtentTreeHeader) SetMagic(val uint16) bool {
	binary.LittleEndian.PutUint16(t[0:2], val)
	return true
}
func (t ExtentTreeHeader) Entries() uint16 {
	return binary.LittleEndian.Uint16(t[2:4])
}
func (t *ExtentTreeHeader) SetEntries(val uint16) bool {
	binary.LittleEndian.PutUint16(t[2:4], val)
	return true
}
func (t ExtentTreeHeader) Max() uint16 {
	return binary.LittleEndian.Uint16(t[4:6])
}
func (t *ExtentTreeHeader) SetMax(val uint16) bool {
	binary.LittleEndian.PutUint16(t[4:6], val)
	return true
}
func (t ExtentTreeHeader) Depth() uint16 {
	return binary.LittleEndian.Uint16(t[6:8])
}
func (t *ExtentTreeHeader) SetDepth(val uint16) bool {
	binary.LittleEndian.PutUint16(t[6:8], val)
	return true
}
func (t ExtentTreeHeader) Generation() uint32 {
	return binary.LittleEndian.Uint32(t[8:12])
}
func (t *ExtentTreeHeader) SetGeneration(val uint32) bool {
	binary.LittleEndian.PutUint32(t[8:12], val)
	return true
}
func (t ExtentTreeHeader) Size() int64 {
	return 12
}
func (t ExtentTreeHeader) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *ExtentTreeHeader) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t ExtentTreeHeader) String() string {
	return strings.Join([]string{"ExtentTreeHeader{", fmt.Sprintf("magic=%v", t.Magic()), fmt.Sprintf("entries=%v", t.Entries()), fmt.Sprintf("max=%v", t.Max()), fmt.Sprintf("depth=%v", t.Depth()), fmt.Sprintf("generation=%v", t.Generation()), "}"}, " ")
}

type ExtentTreeIdx [12]byte

func (t ExtentTreeIdx) Block() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *ExtentTreeIdx) SetBlock(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t ExtentTreeIdx) LeafLo() uint32 {
	return binary.LittleEndian.Uint32(t[4:8])
}
func (t *ExtentTreeIdx) SetLeafLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[4:8], val)
	return true
}
func (t ExtentTreeIdx) LeafHi() uint16 {
	return binary.LittleEndian.Uint16(t[8:10])
}
func (t *ExtentTreeIdx) SetLeafHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[8:10], val)
	return true
}
func (t ExtentTreeIdx) Unused() uint16 {
	return binary.LittleEndian.Uint16(t[10:12])
}
func (t *ExtentTreeIdx) SetUnused(val uint16) bool {
	binary.LittleEndian.PutUint16(t[10:12], val)
	return true
}
func (t ExtentTreeIdx) Size() int64 {
	return 12
}
func (t ExtentTreeIdx) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *ExtentTreeIdx) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t ExtentTreeIdx) String() string {
	return strings.Join([]string{"ExtentTreeIdx{", fmt.Sprintf("block=%v", t.Block()), fmt.Sprintf("leaf_lo=%v", t.LeafLo()), fmt.Sprintf("leaf_hi=%v", t.LeafHi()), fmt.Sprintf("unused=%v", t.Unused()), "}"}, " ")
}

type ExtentTreeNode [12]byte

func (t ExtentTreeNode) Block() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *ExtentTreeNode) SetBlock(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t ExtentTreeNode) Len() uint16 {
	return binary.LittleEndian.Uint16(t[4:6])
}
func (t *ExtentTreeNode) SetLen(val uint16) bool {
	binary.LittleEndian.PutUint16(t[4:6], val)
	return true
}
func (t ExtentTreeNode) StartHi() uint16 {
	return binary.LittleEndian.Uint16(t[6:8])
}
func (t *ExtentTreeNode) SetStartHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[6:8], val)
	return true
}
func (t ExtentTreeNode) StartLo() uint32 {
	return binary.LittleEndian.Uint32(t[8:12])
}
func (t *ExtentTreeNode) SetStartLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[8:12], val)
	return true
}
func (t ExtentTreeNode) Start() uint64 {
	return join_uint32_uint16(t.StartLo(), t.StartHi())
}
func (t *ExtentTreeNode) SetStart(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetStartLo(a)
	t.SetStartHi(b)
	return true
}
func (t ExtentTreeNode) Size() int64 {
	return 12
}
func (t ExtentTreeNode) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *ExtentTreeNode) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t ExtentTreeNode) String() string {
	return strings.Join([]string{"ExtentTreeNode{", fmt.Sprintf("block=%v", t.Block()), fmt.Sprintf("len=%v", t.Len()), fmt.Sprintf("start_hi=%v", t.StartHi()), fmt.Sprintf("start_lo=%v", t.StartLo()), "}"}, " ")
}

type ExtentTreeTail [4]byte

func (t ExtentTreeTail) Checksum() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *ExtentTreeTail) SetChecksum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t ExtentTreeTail) Size() int64 {
	return 4
}
func (t ExtentTreeTail) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *ExtentTreeTail) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t ExtentTreeTail) String() string {
	return strings.Join([]string{"ExtentTreeTail{", fmt.Sprintf("checksum=%v", t.Checksum()), "}"}, " ")
}

type Inode [256]byte

func (t Inode) Mode() uint16 {
	return binary.LittleEndian.Uint16(t[0:2])
}
func (t *Inode) SetMode(val uint16) bool {
	binary.LittleEndian.PutUint16(t[0:2], val)
	return true
}
func (t Inode) Uid() uint16 {
	return binary.LittleEndian.Uint16(t[2:4])
}
func (t *Inode) SetUid(val uint16) bool {
	binary.LittleEndian.PutUint16(t[2:4], val)
	return true
}
func (t Inode) SizeLo() uint32 {
	return binary.LittleEndian.Uint32(t[4:8])
}
func (t *Inode) SetSizeLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[4:8], val)
	return true
}
func (t Inode) Atime() uint32 {
	return binary.LittleEndian.Uint32(t[8:12])
}
func (t *Inode) SetAtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[8:12], val)
	return true
}
func (t Inode) Ctime() uint32 {
	return binary.LittleEndian.Uint32(t[12:16])
}
func (t *Inode) SetCtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[12:16], val)
	return true
}
func (t Inode) Mtime() uint32 {
	return binary.LittleEndian.Uint32(t[16:20])
}
func (t *Inode) SetMtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[16:20], val)
	return true
}
func (t Inode) Dtime() uint32 {
	return binary.LittleEndian.Uint32(t[20:24])
}
func (t *Inode) SetDtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[20:24], val)
	return true
}
func (t Inode) Gid() uint16 {
	return binary.LittleEndian.Uint16(t[24:26])
}
func (t *Inode) SetGid(val uint16) bool {
	binary.LittleEndian.PutUint16(t[24:26], val)
	return true
}
func (t Inode) LinksCount() uint16 {
	return binary.LittleEndian.Uint16(t[26:28])
}
func (t *Inode) SetLinksCount(val uint16) bool {
	binary.LittleEndian.PutUint16(t[26:28], val)
	return true
}
func (t Inode) BlocksLo() uint32 {
	return binary.LittleEndian.Uint32(t[28:32])
}
func (t *Inode) SetBlocksLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[28:32], val)
	return true
}
func (t Inode) Flags() uint32 {
	return binary.LittleEndian.Uint32(t[32:36])
}
func (t *Inode) SetFlags(val uint32) bool {
	binary.LittleEndian.PutUint32(t[32:36], val)
	return true
}
func (t Inode) IVersion() uint32 {
	return binary.LittleEndian.Uint32(t[36:40])
}
func (t *Inode) SetIVersion(val uint32) bool {
	binary.LittleEndian.PutUint32(t[36:40], val)
	return true
}
func (t Inode) BlockMagic() uint16 {
	return binary.LittleEndian.Uint16(t[40:42])
}
func (t *Inode) SetBlockMagic(val uint16) bool {
	binary.LittleEndian.PutUint16(t[40:42], val)
	return true
}
func (t Inode) BlockEntries() uint16 {
	return binary.LittleEndian.Uint16(t[42:44])
}
func (t *Inode) SetBlockEntries(val uint16) bool {
	binary.LittleEndian.PutUint16(t[42:44], val)
	return true
}
func (t Inode) BlockMax() uint16 {
	return binary.LittleEndian.Uint16(t[44:46])
}
func (t *Inode) SetBlockMax(val uint16) bool {
	binary.LittleEndian.PutUint16(t[44:46], val)
	return true
}
func (t Inode) BlockDepth() uint16 {
	return binary.LittleEndian.Uint16(t[46:48])
}
func (t *Inode) SetBlockDepth(val uint16) bool {
	binary.LittleEndian.PutUint16(t[46:48], val)
	return true
}
func (t Inode) BlockGeneration() uint32 {
	return binary.LittleEndian.Uint32(t[48:52])
}
func (t *Inode) SetBlockGeneration(val uint32) bool {
	binary.LittleEndian.PutUint32(t[48:52], val)
	return true
}
func (t Inode) Block0Block() uint32 {
	return binary.LittleEndian.Uint32(t[52:56])
}
func (t *Inode) SetBlock0Block(val uint32) bool {
	binary.LittleEndian.PutUint32(t[52:56], val)
	return true
}
func (t Inode) Block0Len() uint16 {
	return binary.LittleEndian.Uint16(t[56:58])
}
func (t *Inode) SetBlock0Len(val uint16) bool {
	binary.LittleEndian.PutUint16(t[56:58], val)
	return true
}
func (t Inode) Block0StartHi() uint16 {
	return binary.LittleEndian.Uint16(t[58:60])
}
func (t *Inode) SetBlock0StartHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[58:60], val)
	return true
}
func (t Inode) Block0StartLo() uint32 {
	return binary.LittleEndian.Uint32(t[60:64])
}
func (t *Inode) SetBlock0StartLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[60:64], val)
	return true
}
func (t Inode) Block1Block() uint32 {
	return binary.LittleEndian.Uint32(t[64:68])
}
func (t *Inode) SetBlock1Block(val uint32) bool {
	binary.LittleEndian.PutUint32(t[64:68], val)
	return true
}
func (t Inode) Block1Len() uint16 {
	return binary.LittleEndian.Uint16(t[68:70])
}
func (t *Inode) SetBlock1Len(val uint16) bool {
	binary.LittleEndian.PutUint16(t[68:70], val)
	return true
}
func (t Inode) Block1StartHi() uint16 {
	return binary.LittleEndian.Uint16(t[70:72])
}
func (t *Inode) SetBlock1StartHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[70:72], val)
	return true
}
func (t Inode) Block1StartLo() uint32 {
	return binary.LittleEndian.Uint32(t[72:76])
}
func (t *Inode) SetBlock1StartLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[72:76], val)
	return true
}
func (t Inode) Block2Block() uint32 {
	return binary.LittleEndian.Uint32(t[76:80])
}
func (t *Inode) SetBlock2Block(val uint32) bool {
	binary.LittleEndian.PutUint32(t[76:80], val)
	return true
}
func (t Inode) Block2Len() uint16 {
	return binary.LittleEndian.Uint16(t[80:82])
}
func (t *Inode) SetBlock2Len(val uint16) bool {
	binary.LittleEndian.PutUint16(t[80:82], val)
	return true
}
func (t Inode) Block2StartHi() uint16 {
	return binary.LittleEndian.Uint16(t[82:84])
}
func (t *Inode) SetBlock2StartHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[82:84], val)
	return true
}
func (t Inode) Block2StartLo() uint32 {
	return binary.LittleEndian.Uint32(t[84:88])
}
func (t *Inode) SetBlock2StartLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[84:88], val)
	return true
}
func (t Inode) Block3Block() uint32 {
	return binary.LittleEndian.Uint32(t[88:92])
}
func (t *Inode) SetBlock3Block(val uint32) bool {
	binary.LittleEndian.PutUint32(t[88:92], val)
	return true
}
func (t Inode) Block3Len() uint16 {
	return binary.LittleEndian.Uint16(t[92:94])
}
func (t *Inode) SetBlock3Len(val uint16) bool {
	binary.LittleEndian.PutUint16(t[92:94], val)
	return true
}
func (t Inode) Block3StartHi() uint16 {
	return binary.LittleEndian.Uint16(t[94:96])
}
func (t *Inode) SetBlock3StartHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[94:96], val)
	return true
}
func (t Inode) Block3StartLo() uint32 {
	return binary.LittleEndian.Uint32(t[96:100])
}
func (t *Inode) SetBlock3StartLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[96:100], val)
	return true
}
func (t Inode) Generation() uint32 {
	return binary.LittleEndian.Uint32(t[100:104])
}
func (t *Inode) SetGeneration(val uint32) bool {
	binary.LittleEndian.PutUint32(t[100:104], val)
	return true
}
func (t Inode) FileAclLo() uint32 {
	return binary.LittleEndian.Uint32(t[104:108])
}
func (t *Inode) SetFileAclLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[104:108], val)
	return true
}
func (t Inode) SizeHigh() uint32 {
	return binary.LittleEndian.Uint32(t[108:112])
}
func (t *Inode) SetSizeHigh(val uint32) bool {
	binary.LittleEndian.PutUint32(t[108:112], val)
	return true
}
func (t Inode) ObsoFaddr() uint32 {
	return binary.LittleEndian.Uint32(t[112:116])
}
func (t *Inode) SetObsoFaddr(val uint32) bool {
	binary.LittleEndian.PutUint32(t[112:116], val)
	return true
}
func (t Inode) BlocksHigh() uint16 {
	return binary.LittleEndian.Uint16(t[116:118])
}
func (t *Inode) SetBlocksHigh(val uint16) bool {
	binary.LittleEndian.PutUint16(t[116:118], val)
	return true
}
func (t Inode) FileAclHigh() uint16 {
	return binary.LittleEndian.Uint16(t[118:120])
}
func (t *Inode) SetFileAclHigh(val uint16) bool {
	binary.LittleEndian.PutUint16(t[118:120], val)
	return true
}
func (t Inode) UidHigh() uint16 {
	return binary.LittleEndian.Uint16(t[120:122])
}
func (t *Inode) SetUidHigh(val uint16) bool {
	binary.LittleEndian.PutUint16(t[120:122], val)
	return true
}
func (t Inode) GidHigh() uint16 {
	return binary.LittleEndian.Uint16(t[122:124])
}
func (t *Inode) SetGidHigh(val uint16) bool {
	binary.LittleEndian.PutUint16(t[122:124], val)
	return true
}
func (t Inode) ChecksumLo() uint16 {
	return binary.LittleEndian.Uint16(t[124:126])
}
func (t *Inode) SetChecksumLo(val uint16) bool {
	binary.LittleEndian.PutUint16(t[124:126], val)
	return true
}
func (t Inode) Reserved() uint16 {
	return binary.LittleEndian.Uint16(t[126:128])
}
func (t *Inode) SetReserved(val uint16) bool {
	binary.LittleEndian.PutUint16(t[126:128], val)
	return true
}
func (t Inode) ExtraIsize() uint16 {
	return binary.LittleEndian.Uint16(t[128:130])
}
func (t *Inode) SetExtraIsize(val uint16) bool {
	binary.LittleEndian.PutUint16(t[128:130], val)
	return true
}
func (t Inode) ChecksumHi() uint16 {
	return binary.LittleEndian.Uint16(t[130:132])
}
func (t *Inode) SetChecksumHi(val uint16) bool {
	binary.LittleEndian.PutUint16(t[130:132], val)
	return true
}
func (t Inode) CtimeExtra() uint32 {
	return binary.LittleEndian.Uint32(t[132:136])
}
func (t *Inode) SetCtimeExtra(val uint32) bool {
	binary.LittleEndian.PutUint32(t[132:136], val)
	return true
}
func (t Inode) MtimeExtra() uint32 {
	return binary.LittleEndian.Uint32(t[136:140])
}
func (t *Inode) SetMtimeExtra(val uint32) bool {
	binary.LittleEndian.PutUint32(t[136:140], val)
	return true
}
func (t Inode) AtimeExtra() uint32 {
	return binary.LittleEndian.Uint32(t[140:144])
}
func (t *Inode) SetAtimeExtra(val uint32) bool {
	binary.LittleEndian.PutUint32(t[140:144], val)
	return true
}
func (t Inode) Crtime() uint32 {
	return binary.LittleEndian.Uint32(t[144:148])
}
func (t *Inode) SetCrtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[144:148], val)
	return true
}
func (t Inode) CrtimeExtra() uint32 {
	return binary.LittleEndian.Uint32(t[148:152])
}
func (t *Inode) SetCrtimeExtra(val uint32) bool {
	binary.LittleEndian.PutUint32(t[148:152], val)
	return true
}
func (t Inode) VersionHi() uint32 {
	return binary.LittleEndian.Uint32(t[152:156])
}
func (t *Inode) SetVersionHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[152:156], val)
	return true
}
func (t Inode) Projid() uint32 {
	return binary.LittleEndian.Uint32(t[156:160])
}
func (t *Inode) SetProjid(val uint32) bool {
	binary.LittleEndian.PutUint32(t[156:160], val)
	return true
}
func (t Inode) ExtraLength() int64 {
	return 96
}
func (t Inode) Extra(i int) (byte, bool) {
	if i >= 96 {
		return 0, false
	}
	return t[(160 + (i * 1)):(160 + ((i + 1) * 1))][0], true
}
func (t *Inode) SetExtra(i int, val byte) bool {
	if i >= 96 {
		return false
	}
	t[(160 + (i * 1)):(160 + ((i + 1) * 1))][0] = val
	return true
}
func (t Inode) Block0Start() uint64 {
	return join_uint32_uint16(t.Block0StartLo(), t.Block0StartHi())
}
func (t *Inode) SetBlock0Start(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetBlock0StartLo(a)
	t.SetBlock0StartHi(b)
	return true
}
func (t Inode) Block1Start() uint64 {
	return join_uint32_uint16(t.Block1StartLo(), t.Block1StartHi())
}
func (t *Inode) SetBlock1Start(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetBlock1StartLo(a)
	t.SetBlock1StartHi(b)
	return true
}
func (t Inode) Block2Start() uint64 {
	return join_uint32_uint16(t.Block2StartLo(), t.Block2StartHi())
}
func (t *Inode) SetBlock2Start(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetBlock2StartLo(a)
	t.SetBlock2StartHi(b)
	return true
}
func (t Inode) Block3Start() uint64 {
	return join_uint32_uint16(t.Block3StartLo(), t.Block3StartHi())
}
func (t *Inode) SetBlock3Start(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetBlock3StartLo(a)
	t.SetBlock3StartHi(b)
	return true
}
func (t Inode) NSize() uint64 {
	return join_uint32_uint32(t.SizeLo(), t.SizeHigh())
}
func (t *Inode) SetNSize(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetSizeLo(a)
	t.SetSizeHigh(b)
	return true
}
func (t Inode) Blocks() uint64 {
	return join_uint32_uint16(t.BlocksLo(), t.BlocksHigh())
}
func (t *Inode) SetBlocks(val uint64) bool {
	var a, b = split_uint32_uint16(val)
	t.SetBlocksLo(a)
	t.SetBlocksHigh(b)
	return true
}
func (t Inode) Size() int64 {
	return 256
}
func (t Inode) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *Inode) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t Inode) String() string {
	return strings.Join([]string{"Inode{", fmt.Sprintf("mode=%v", t.Mode()), fmt.Sprintf("uid=%v", t.Uid()), fmt.Sprintf("size_lo=%v", t.SizeLo()), fmt.Sprintf("atime=%v", t.Atime()), fmt.Sprintf("ctime=%v", t.Ctime()), fmt.Sprintf("mtime=%v", t.Mtime()), fmt.Sprintf("dtime=%v", t.Dtime()), fmt.Sprintf("gid=%v", t.Gid()), fmt.Sprintf("links_count=%v", t.LinksCount()), fmt.Sprintf("blocks_lo=%v", t.BlocksLo()), fmt.Sprintf("flags=%v", t.Flags()), fmt.Sprintf("i_version=%v", t.IVersion()), fmt.Sprintf("block_magic=%v", t.BlockMagic()), fmt.Sprintf("block_entries=%v", t.BlockEntries()), fmt.Sprintf("block_max=%v", t.BlockMax()), fmt.Sprintf("block_depth=%v", t.BlockDepth()), fmt.Sprintf("block_generation=%v", t.BlockGeneration()), fmt.Sprintf("block_0_block=%v", t.Block0Block()), fmt.Sprintf("block_0_len=%v", t.Block0Len()), fmt.Sprintf("block_0_start_hi=%v", t.Block0StartHi()), fmt.Sprintf("block_0_start_lo=%v", t.Block0StartLo()), fmt.Sprintf("block_1_block=%v", t.Block1Block()), fmt.Sprintf("block_1_len=%v", t.Block1Len()), fmt.Sprintf("block_1_start_hi=%v", t.Block1StartHi()), fmt.Sprintf("block_1_start_lo=%v", t.Block1StartLo()), fmt.Sprintf("block_2_block=%v", t.Block2Block()), fmt.Sprintf("block_2_len=%v", t.Block2Len()), fmt.Sprintf("block_2_start_hi=%v", t.Block2StartHi()), fmt.Sprintf("block_2_start_lo=%v", t.Block2StartLo()), fmt.Sprintf("block_3_block=%v", t.Block3Block()), fmt.Sprintf("block_3_len=%v", t.Block3Len()), fmt.Sprintf("block_3_start_hi=%v", t.Block3StartHi()), fmt.Sprintf("block_3_start_lo=%v", t.Block3StartLo()), fmt.Sprintf("generation=%v", t.Generation()), fmt.Sprintf("file_acl_lo=%v", t.FileAclLo()), fmt.Sprintf("size_high=%v", t.SizeHigh()), fmt.Sprintf("obso_faddr=%v", t.ObsoFaddr()), fmt.Sprintf("blocks_high=%v", t.BlocksHigh()), fmt.Sprintf("file_acl_high=%v", t.FileAclHigh()), fmt.Sprintf("uid_high=%v", t.UidHigh()), fmt.Sprintf("gid_high=%v", t.GidHigh()), fmt.Sprintf("checksum_lo=%v", t.ChecksumLo()), fmt.Sprintf("reserved=%v", t.Reserved()), fmt.Sprintf("extra_isize=%v", t.ExtraIsize()), fmt.Sprintf("checksum_hi=%v", t.ChecksumHi()), fmt.Sprintf("ctime_extra=%v", t.CtimeExtra()), fmt.Sprintf("mtime_extra=%v", t.MtimeExtra()), fmt.Sprintf("atime_extra=%v", t.AtimeExtra()), fmt.Sprintf("crtime=%v", t.Crtime()), fmt.Sprintf("crtime_extra=%v", t.CrtimeExtra()), fmt.Sprintf("version_hi=%v", t.VersionHi()), fmt.Sprintf("projid=%v", t.Projid()), "}"}, " ")
}

type Superblock [1024]byte

func (t Superblock) InodesCount() uint32 {
	return binary.LittleEndian.Uint32(t[0:4])
}
func (t *Superblock) SetInodesCount(val uint32) bool {
	binary.LittleEndian.PutUint32(t[0:4], val)
	return true
}
func (t Superblock) BlocksCountLo() uint32 {
	return binary.LittleEndian.Uint32(t[4:8])
}
func (t *Superblock) SetBlocksCountLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[4:8], val)
	return true
}
func (t Superblock) RBlocksCountLo() uint32 {
	return binary.LittleEndian.Uint32(t[8:12])
}
func (t *Superblock) SetRBlocksCountLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[8:12], val)
	return true
}
func (t Superblock) FreeBlocksCountLo() uint32 {
	return binary.LittleEndian.Uint32(t[12:16])
}
func (t *Superblock) SetFreeBlocksCountLo(val uint32) bool {
	binary.LittleEndian.PutUint32(t[12:16], val)
	return true
}
func (t Superblock) FreeInodesCount() uint32 {
	return binary.LittleEndian.Uint32(t[16:20])
}
func (t *Superblock) SetFreeInodesCount(val uint32) bool {
	binary.LittleEndian.PutUint32(t[16:20], val)
	return true
}
func (t Superblock) FirstDataBlock() uint32 {
	return binary.LittleEndian.Uint32(t[20:24])
}
func (t *Superblock) SetFirstDataBlock(val uint32) bool {
	binary.LittleEndian.PutUint32(t[20:24], val)
	return true
}
func (t Superblock) LogBlockSize() uint32 {
	return binary.LittleEndian.Uint32(t[24:28])
}
func (t *Superblock) SetLogBlockSize(val uint32) bool {
	binary.LittleEndian.PutUint32(t[24:28], val)
	return true
}
func (t Superblock) LogClusterSize() uint32 {
	return binary.LittleEndian.Uint32(t[28:32])
}
func (t *Superblock) SetLogClusterSize(val uint32) bool {
	binary.LittleEndian.PutUint32(t[28:32], val)
	return true
}
func (t Superblock) BlocksPerGroup() uint32 {
	return binary.LittleEndian.Uint32(t[32:36])
}
func (t *Superblock) SetBlocksPerGroup(val uint32) bool {
	binary.LittleEndian.PutUint32(t[32:36], val)
	return true
}
func (t Superblock) ClustersPerGroup() uint32 {
	return binary.LittleEndian.Uint32(t[36:40])
}
func (t *Superblock) SetClustersPerGroup(val uint32) bool {
	binary.LittleEndian.PutUint32(t[36:40], val)
	return true
}
func (t Superblock) InodesPerGroup() uint32 {
	return binary.LittleEndian.Uint32(t[40:44])
}
func (t *Superblock) SetInodesPerGroup(val uint32) bool {
	binary.LittleEndian.PutUint32(t[40:44], val)
	return true
}
func (t Superblock) Mtime() uint32 {
	return binary.LittleEndian.Uint32(t[44:48])
}
func (t *Superblock) SetMtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[44:48], val)
	return true
}
func (t Superblock) Wtime() uint32 {
	return binary.LittleEndian.Uint32(t[48:52])
}
func (t *Superblock) SetWtime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[48:52], val)
	return true
}
func (t Superblock) MntCount() uint16 {
	return binary.LittleEndian.Uint16(t[52:54])
}
func (t *Superblock) SetMntCount(val uint16) bool {
	binary.LittleEndian.PutUint16(t[52:54], val)
	return true
}
func (t Superblock) MaxMntCount() uint16 {
	return binary.LittleEndian.Uint16(t[54:56])
}
func (t *Superblock) SetMaxMntCount(val uint16) bool {
	binary.LittleEndian.PutUint16(t[54:56], val)
	return true
}
func (t Superblock) Magic() uint16 {
	return binary.LittleEndian.Uint16(t[56:58])
}
func (t *Superblock) SetMagic(val uint16) bool {
	binary.LittleEndian.PutUint16(t[56:58], val)
	return true
}
func (t Superblock) State() uint16 {
	return binary.LittleEndian.Uint16(t[58:60])
}
func (t *Superblock) SetState(val uint16) bool {
	binary.LittleEndian.PutUint16(t[58:60], val)
	return true
}
func (t Superblock) Errors() uint16 {
	return binary.LittleEndian.Uint16(t[60:62])
}
func (t *Superblock) SetErrors(val uint16) bool {
	binary.LittleEndian.PutUint16(t[60:62], val)
	return true
}
func (t Superblock) MinorRevLevel() uint16 {
	return binary.LittleEndian.Uint16(t[62:64])
}
func (t *Superblock) SetMinorRevLevel(val uint16) bool {
	binary.LittleEndian.PutUint16(t[62:64], val)
	return true
}
func (t Superblock) Lastcheck() uint32 {
	return binary.LittleEndian.Uint32(t[64:68])
}
func (t *Superblock) SetLastcheck(val uint32) bool {
	binary.LittleEndian.PutUint32(t[64:68], val)
	return true
}
func (t Superblock) Checkinterval() uint32 {
	return binary.LittleEndian.Uint32(t[68:72])
}
func (t *Superblock) SetCheckinterval(val uint32) bool {
	binary.LittleEndian.PutUint32(t[68:72], val)
	return true
}
func (t Superblock) CreatorOs() uint32 {
	return binary.LittleEndian.Uint32(t[72:76])
}
func (t *Superblock) SetCreatorOs(val uint32) bool {
	binary.LittleEndian.PutUint32(t[72:76], val)
	return true
}
func (t Superblock) RevLevel() uint32 {
	return binary.LittleEndian.Uint32(t[76:80])
}
func (t *Superblock) SetRevLevel(val uint32) bool {
	binary.LittleEndian.PutUint32(t[76:80], val)
	return true
}
func (t Superblock) DefResuid() uint16 {
	return binary.LittleEndian.Uint16(t[80:82])
}
func (t *Superblock) SetDefResuid(val uint16) bool {
	binary.LittleEndian.PutUint16(t[80:82], val)
	return true
}
func (t Superblock) DefResgid() uint16 {
	return binary.LittleEndian.Uint16(t[82:84])
}
func (t *Superblock) SetDefResgid(val uint16) bool {
	binary.LittleEndian.PutUint16(t[82:84], val)
	return true
}
func (t Superblock) FirstIno() uint32 {
	return binary.LittleEndian.Uint32(t[84:88])
}
func (t *Superblock) SetFirstIno(val uint32) bool {
	binary.LittleEndian.PutUint32(t[84:88], val)
	return true
}
func (t Superblock) InodeSize() uint16 {
	return binary.LittleEndian.Uint16(t[88:90])
}
func (t *Superblock) SetInodeSize(val uint16) bool {
	binary.LittleEndian.PutUint16(t[88:90], val)
	return true
}
func (t Superblock) BlockGroupNr() uint16 {
	return binary.LittleEndian.Uint16(t[90:92])
}
func (t *Superblock) SetBlockGroupNr(val uint16) bool {
	binary.LittleEndian.PutUint16(t[90:92], val)
	return true
}
func (t Superblock) FeatureCompat() uint32 {
	return binary.LittleEndian.Uint32(t[92:96])
}
func (t *Superblock) SetFeatureCompat(val uint32) bool {
	binary.LittleEndian.PutUint32(t[92:96], val)
	return true
}
func (t Superblock) FeatureIncompat() uint32 {
	return binary.LittleEndian.Uint32(t[96:100])
}
func (t *Superblock) SetFeatureIncompat(val uint32) bool {
	binary.LittleEndian.PutUint32(t[96:100], val)
	return true
}
func (t Superblock) FeatureRoCompat() uint32 {
	return binary.LittleEndian.Uint32(t[100:104])
}
func (t *Superblock) SetFeatureRoCompat(val uint32) bool {
	binary.LittleEndian.PutUint32(t[100:104], val)
	return true
}
func (t Superblock) UuidLength() int64 {
	return 16
}
func (t Superblock) Uuid(i int) (uint8, bool) {
	if i >= 16 {
		return 0, false
	}
	return t[(104 + (i * 1)):(104 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetUuid(i int, val uint8) bool {
	if i >= 16 {
		return false
	}
	t[(104 + (i * 1)):(104 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) VolumeNameLength() int64 {
	return 16
}
func (t Superblock) VolumeName(i int) (byte, bool) {
	if i >= 16 {
		return 0, false
	}
	return t[(120 + (i * 1)):(120 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetVolumeName(i int, val byte) bool {
	if i >= 16 {
		return false
	}
	t[(120 + (i * 1)):(120 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) LastMountedLength() int64 {
	return 64
}
func (t Superblock) LastMounted(i int) (byte, bool) {
	if i >= 64 {
		return 0, false
	}
	return t[(136 + (i * 1)):(136 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetLastMounted(i int, val byte) bool {
	if i >= 64 {
		return false
	}
	t[(136 + (i * 1)):(136 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) AlgorithmUsageBitmap() uint32 {
	return binary.LittleEndian.Uint32(t[200:204])
}
func (t *Superblock) SetAlgorithmUsageBitmap(val uint32) bool {
	binary.LittleEndian.PutUint32(t[200:204], val)
	return true
}
func (t Superblock) PreallocBlocks() uint8 {
	return t[204:205][0]
}
func (t *Superblock) SetPreallocBlocks(val uint8) bool {
	t[204:205][0] = val
	return true
}
func (t Superblock) PreallocDirBlocks() uint8 {
	return t[205:206][0]
}
func (t *Superblock) SetPreallocDirBlocks(val uint8) bool {
	t[205:206][0] = val
	return true
}
func (t Superblock) ReservedGdtBlocks() uint16 {
	return binary.LittleEndian.Uint16(t[206:208])
}
func (t *Superblock) SetReservedGdtBlocks(val uint16) bool {
	binary.LittleEndian.PutUint16(t[206:208], val)
	return true
}
func (t Superblock) JournalUuidLength() int64 {
	return 16
}
func (t Superblock) JournalUuid(i int) (uint8, bool) {
	if i >= 16 {
		return 0, false
	}
	return t[(208 + (i * 1)):(208 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetJournalUuid(i int, val uint8) bool {
	if i >= 16 {
		return false
	}
	t[(208 + (i * 1)):(208 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) JournalInum() uint32 {
	return binary.LittleEndian.Uint32(t[224:228])
}
func (t *Superblock) SetJournalInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[224:228], val)
	return true
}
func (t Superblock) JournalDev() uint32 {
	return binary.LittleEndian.Uint32(t[228:232])
}
func (t *Superblock) SetJournalDev(val uint32) bool {
	binary.LittleEndian.PutUint32(t[228:232], val)
	return true
}
func (t Superblock) LastOrphan() uint32 {
	return binary.LittleEndian.Uint32(t[232:236])
}
func (t *Superblock) SetLastOrphan(val uint32) bool {
	binary.LittleEndian.PutUint32(t[232:236], val)
	return true
}
func (t Superblock) HashSeedLength() int64 {
	return 4
}
func (t Superblock) HashSeed(i int) (uint32, bool) {
	if i >= 4 {
		return 0, false
	}
	return binary.LittleEndian.Uint32(t[(236 + (i * 4)):(236 + ((i + 1) * 4))]), true
}
func (t *Superblock) SetHashSeed(i int, val uint32) bool {
	if i >= 4 {
		return false
	}
	binary.LittleEndian.PutUint32(t[(236+(i*4)):(236+((i+1)*4))], val)
	return true
}
func (t Superblock) DefHashVersion() uint8 {
	return t[252:253][0]
}
func (t *Superblock) SetDefHashVersion(val uint8) bool {
	t[252:253][0] = val
	return true
}
func (t Superblock) JnlBackupType() uint8 {
	return t[253:254][0]
}
func (t *Superblock) SetJnlBackupType(val uint8) bool {
	t[253:254][0] = val
	return true
}
func (t Superblock) DescSize() uint16 {
	return binary.LittleEndian.Uint16(t[254:256])
}
func (t *Superblock) SetDescSize(val uint16) bool {
	binary.LittleEndian.PutUint16(t[254:256], val)
	return true
}
func (t Superblock) SDefaultMountOpts() uint32 {
	return binary.LittleEndian.Uint32(t[256:260])
}
func (t *Superblock) SetSDefaultMountOpts(val uint32) bool {
	binary.LittleEndian.PutUint32(t[256:260], val)
	return true
}
func (t Superblock) FirstMetaBg() uint32 {
	return binary.LittleEndian.Uint32(t[260:264])
}
func (t *Superblock) SetFirstMetaBg(val uint32) bool {
	binary.LittleEndian.PutUint32(t[260:264], val)
	return true
}
func (t Superblock) MkfsTime() uint32 {
	return binary.LittleEndian.Uint32(t[264:268])
}
func (t *Superblock) SetMkfsTime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[264:268], val)
	return true
}
func (t Superblock) JnlBlocksLength() int64 {
	return 17
}
func (t Superblock) JnlBlocks(i int) (uint32, bool) {
	if i >= 17 {
		return 0, false
	}
	return binary.LittleEndian.Uint32(t[(268 + (i * 4)):(268 + ((i + 1) * 4))]), true
}
func (t *Superblock) SetJnlBlocks(i int, val uint32) bool {
	if i >= 17 {
		return false
	}
	binary.LittleEndian.PutUint32(t[(268+(i*4)):(268+((i+1)*4))], val)
	return true
}
func (t Superblock) BlocksCountHi() uint32 {
	return binary.LittleEndian.Uint32(t[336:340])
}
func (t *Superblock) SetBlocksCountHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[336:340], val)
	return true
}
func (t Superblock) RBlocksCountHi() uint32 {
	return binary.LittleEndian.Uint32(t[340:344])
}
func (t *Superblock) SetRBlocksCountHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[340:344], val)
	return true
}
func (t Superblock) FreeBlocksCountHi() uint32 {
	return binary.LittleEndian.Uint32(t[344:348])
}
func (t *Superblock) SetFreeBlocksCountHi(val uint32) bool {
	binary.LittleEndian.PutUint32(t[344:348], val)
	return true
}
func (t Superblock) MinExtraIsize() uint16 {
	return binary.LittleEndian.Uint16(t[348:350])
}
func (t *Superblock) SetMinExtraIsize(val uint16) bool {
	binary.LittleEndian.PutUint16(t[348:350], val)
	return true
}
func (t Superblock) WantExtraIsize() uint16 {
	return binary.LittleEndian.Uint16(t[350:352])
}
func (t *Superblock) SetWantExtraIsize(val uint16) bool {
	binary.LittleEndian.PutUint16(t[350:352], val)
	return true
}
func (t Superblock) Flags() uint32 {
	return binary.LittleEndian.Uint32(t[352:356])
}
func (t *Superblock) SetFlags(val uint32) bool {
	binary.LittleEndian.PutUint32(t[352:356], val)
	return true
}
func (t Superblock) RaidStride() uint16 {
	return binary.LittleEndian.Uint16(t[356:358])
}
func (t *Superblock) SetRaidStride(val uint16) bool {
	binary.LittleEndian.PutUint16(t[356:358], val)
	return true
}
func (t Superblock) MmpUpdateInterval() uint16 {
	return binary.LittleEndian.Uint16(t[358:360])
}
func (t *Superblock) SetMmpUpdateInterval(val uint16) bool {
	binary.LittleEndian.PutUint16(t[358:360], val)
	return true
}
func (t Superblock) MmpBlock() uint64 {
	return binary.LittleEndian.Uint64(t[360:368])
}
func (t *Superblock) SetMmpBlock(val uint64) bool {
	binary.LittleEndian.PutUint64(t[360:368], val)
	return true
}
func (t Superblock) RaidStripeWidth() uint32 {
	return binary.LittleEndian.Uint32(t[368:372])
}
func (t *Superblock) SetRaidStripeWidth(val uint32) bool {
	binary.LittleEndian.PutUint32(t[368:372], val)
	return true
}
func (t Superblock) LogGroupsPerFlex() uint8 {
	return t[372:373][0]
}
func (t *Superblock) SetLogGroupsPerFlex(val uint8) bool {
	t[372:373][0] = val
	return true
}
func (t Superblock) ChecksumType() uint8 {
	return t[373:374][0]
}
func (t *Superblock) SetChecksumType(val uint8) bool {
	t[373:374][0] = val
	return true
}
func (t Superblock) EncryptionLevel() uint8 {
	return t[374:375][0]
}
func (t *Superblock) SetEncryptionLevel(val uint8) bool {
	t[374:375][0] = val
	return true
}
func (t Superblock) ReservedPad() uint8 {
	return t[375:376][0]
}
func (t *Superblock) SetReservedPad(val uint8) bool {
	t[375:376][0] = val
	return true
}
func (t Superblock) KbytesWritten() uint64 {
	return binary.LittleEndian.Uint64(t[376:384])
}
func (t *Superblock) SetKbytesWritten(val uint64) bool {
	binary.LittleEndian.PutUint64(t[376:384], val)
	return true
}
func (t Superblock) SnapshotInum() uint32 {
	return binary.LittleEndian.Uint32(t[384:388])
}
func (t *Superblock) SetSnapshotInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[384:388], val)
	return true
}
func (t Superblock) SnapshotId() uint32 {
	return binary.LittleEndian.Uint32(t[388:392])
}
func (t *Superblock) SetSnapshotId(val uint32) bool {
	binary.LittleEndian.PutUint32(t[388:392], val)
	return true
}
func (t Superblock) SnapshotRBlocksCount() uint64 {
	return binary.LittleEndian.Uint64(t[392:400])
}
func (t *Superblock) SetSnapshotRBlocksCount(val uint64) bool {
	binary.LittleEndian.PutUint64(t[392:400], val)
	return true
}
func (t Superblock) SnapshotList() uint32 {
	return binary.LittleEndian.Uint32(t[400:404])
}
func (t *Superblock) SetSnapshotList(val uint32) bool {
	binary.LittleEndian.PutUint32(t[400:404], val)
	return true
}
func (t Superblock) ErrorCount() uint32 {
	return binary.LittleEndian.Uint32(t[404:408])
}
func (t *Superblock) SetErrorCount(val uint32) bool {
	binary.LittleEndian.PutUint32(t[404:408], val)
	return true
}
func (t Superblock) FirstErrorTime() uint32 {
	return binary.LittleEndian.Uint32(t[408:412])
}
func (t *Superblock) SetFirstErrorTime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[408:412], val)
	return true
}
func (t Superblock) FirstErrorIno() uint32 {
	return binary.LittleEndian.Uint32(t[412:416])
}
func (t *Superblock) SetFirstErrorIno(val uint32) bool {
	binary.LittleEndian.PutUint32(t[412:416], val)
	return true
}
func (t Superblock) FirstErrorBlock() uint64 {
	return binary.LittleEndian.Uint64(t[416:424])
}
func (t *Superblock) SetFirstErrorBlock(val uint64) bool {
	binary.LittleEndian.PutUint64(t[416:424], val)
	return true
}
func (t Superblock) FirstErrorFuncLength() int64 {
	return 32
}
func (t Superblock) FirstErrorFunc(i int) (uint8, bool) {
	if i >= 32 {
		return 0, false
	}
	return t[(424 + (i * 1)):(424 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetFirstErrorFunc(i int, val uint8) bool {
	if i >= 32 {
		return false
	}
	t[(424 + (i * 1)):(424 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) FirstErrorLine() uint32 {
	return binary.LittleEndian.Uint32(t[456:460])
}
func (t *Superblock) SetFirstErrorLine(val uint32) bool {
	binary.LittleEndian.PutUint32(t[456:460], val)
	return true
}
func (t Superblock) LastErrorTime() uint32 {
	return binary.LittleEndian.Uint32(t[460:464])
}
func (t *Superblock) SetLastErrorTime(val uint32) bool {
	binary.LittleEndian.PutUint32(t[460:464], val)
	return true
}
func (t Superblock) LastErrorIno() uint32 {
	return binary.LittleEndian.Uint32(t[464:468])
}
func (t *Superblock) SetLastErrorIno(val uint32) bool {
	binary.LittleEndian.PutUint32(t[464:468], val)
	return true
}
func (t Superblock) LastErrorLine() uint32 {
	return binary.LittleEndian.Uint32(t[468:472])
}
func (t *Superblock) SetLastErrorLine(val uint32) bool {
	binary.LittleEndian.PutUint32(t[468:472], val)
	return true
}
func (t Superblock) LastErrorBlock() uint64 {
	return binary.LittleEndian.Uint64(t[472:480])
}
func (t *Superblock) SetLastErrorBlock(val uint64) bool {
	binary.LittleEndian.PutUint64(t[472:480], val)
	return true
}
func (t Superblock) LastErrorFuncLength() int64 {
	return 32
}
func (t Superblock) LastErrorFunc(i int) (uint8, bool) {
	if i >= 32 {
		return 0, false
	}
	return t[(480 + (i * 1)):(480 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetLastErrorFunc(i int, val uint8) bool {
	if i >= 32 {
		return false
	}
	t[(480 + (i * 1)):(480 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) MountOptsLength() int64 {
	return 64
}
func (t Superblock) MountOpts(i int) (uint8, bool) {
	if i >= 64 {
		return 0, false
	}
	return t[(512 + (i * 1)):(512 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetMountOpts(i int, val uint8) bool {
	if i >= 64 {
		return false
	}
	t[(512 + (i * 1)):(512 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) UsrQuotaInum() uint32 {
	return binary.LittleEndian.Uint32(t[576:580])
}
func (t *Superblock) SetUsrQuotaInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[576:580], val)
	return true
}
func (t Superblock) GrpQuotaInum() uint32 {
	return binary.LittleEndian.Uint32(t[580:584])
}
func (t *Superblock) SetGrpQuotaInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[580:584], val)
	return true
}
func (t Superblock) OverheadClusters() uint32 {
	return binary.LittleEndian.Uint32(t[584:588])
}
func (t *Superblock) SetOverheadClusters(val uint32) bool {
	binary.LittleEndian.PutUint32(t[584:588], val)
	return true
}
func (t Superblock) BackupBgsLength() int64 {
	return 2
}
func (t Superblock) BackupBgs(i int) (uint32, bool) {
	if i >= 2 {
		return 0, false
	}
	return binary.LittleEndian.Uint32(t[(588 + (i * 4)):(588 + ((i + 1) * 4))]), true
}
func (t *Superblock) SetBackupBgs(i int, val uint32) bool {
	if i >= 2 {
		return false
	}
	binary.LittleEndian.PutUint32(t[(588+(i*4)):(588+((i+1)*4))], val)
	return true
}
func (t Superblock) EncryptAlgosLength() int64 {
	return 4
}
func (t Superblock) EncryptAlgos(i int) (uint8, bool) {
	if i >= 4 {
		return 0, false
	}
	return t[(596 + (i * 1)):(596 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetEncryptAlgos(i int, val uint8) bool {
	if i >= 4 {
		return false
	}
	t[(596 + (i * 1)):(596 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) EncryptPwSaltLength() int64 {
	return 16
}
func (t Superblock) EncryptPwSalt(i int) (uint8, bool) {
	if i >= 16 {
		return 0, false
	}
	return t[(600 + (i * 1)):(600 + ((i + 1) * 1))][0], true
}
func (t *Superblock) SetEncryptPwSalt(i int, val uint8) bool {
	if i >= 16 {
		return false
	}
	t[(600 + (i * 1)):(600 + ((i + 1) * 1))][0] = val
	return true
}
func (t Superblock) LpfIno() uint32 {
	return binary.LittleEndian.Uint32(t[616:620])
}
func (t *Superblock) SetLpfIno(val uint32) bool {
	binary.LittleEndian.PutUint32(t[616:620], val)
	return true
}
func (t Superblock) PrjQuotaInum() uint32 {
	return binary.LittleEndian.Uint32(t[620:624])
}
func (t *Superblock) SetPrjQuotaInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[620:624], val)
	return true
}
func (t Superblock) ChecksumSeed() uint32 {
	return binary.LittleEndian.Uint32(t[624:628])
}
func (t *Superblock) SetChecksumSeed(val uint32) bool {
	binary.LittleEndian.PutUint32(t[624:628], val)
	return true
}
func (t Superblock) WtimeHi() uint8 {
	return t[628:629][0]
}
func (t *Superblock) SetWtimeHi(val uint8) bool {
	t[628:629][0] = val
	return true
}
func (t Superblock) MtimeHi() uint8 {
	return t[629:630][0]
}
func (t *Superblock) SetMtimeHi(val uint8) bool {
	t[629:630][0] = val
	return true
}
func (t Superblock) MkfsTimeHi() uint8 {
	return t[630:631][0]
}
func (t *Superblock) SetMkfsTimeHi(val uint8) bool {
	t[630:631][0] = val
	return true
}
func (t Superblock) LastcheckHi() uint8 {
	return t[631:632][0]
}
func (t *Superblock) SetLastcheckHi(val uint8) bool {
	t[631:632][0] = val
	return true
}
func (t Superblock) FirstErrorTimeHi() uint8 {
	return t[632:633][0]
}
func (t *Superblock) SetFirstErrorTimeHi(val uint8) bool {
	t[632:633][0] = val
	return true
}
func (t Superblock) LastErrorTimeHi() uint8 {
	return t[633:634][0]
}
func (t *Superblock) SetLastErrorTimeHi(val uint8) bool {
	t[633:634][0] = val
	return true
}
func (t Superblock) FirstErrorErrcode() uint8 {
	return t[634:635][0]
}
func (t *Superblock) SetFirstErrorErrcode(val uint8) bool {
	t[634:635][0] = val
	return true
}
func (t Superblock) LastErrorErrcode() uint8 {
	return t[635:636][0]
}
func (t *Superblock) SetLastErrorErrcode(val uint8) bool {
	t[635:636][0] = val
	return true
}
func (t Superblock) Encoding() uint16 {
	return binary.LittleEndian.Uint16(t[636:638])
}
func (t *Superblock) SetEncoding(val uint16) bool {
	binary.LittleEndian.PutUint16(t[636:638], val)
	return true
}
func (t Superblock) EncodingFlags() uint16 {
	return binary.LittleEndian.Uint16(t[638:640])
}
func (t *Superblock) SetEncodingFlags(val uint16) bool {
	binary.LittleEndian.PutUint16(t[638:640], val)
	return true
}
func (t Superblock) OrphanFileInum() uint32 {
	return binary.LittleEndian.Uint32(t[640:644])
}
func (t *Superblock) SetOrphanFileInum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[640:644], val)
	return true
}
func (t Superblock) ReservedLength() int64 {
	return 94
}
func (t Superblock) Reserved(i int) (uint32, bool) {
	if i >= 94 {
		return 0, false
	}
	return binary.LittleEndian.Uint32(t[(644 + (i * 4)):(644 + ((i + 1) * 4))]), true
}
func (t *Superblock) SetReserved(i int, val uint32) bool {
	if i >= 94 {
		return false
	}
	binary.LittleEndian.PutUint32(t[(644+(i*4)):(644+((i+1)*4))], val)
	return true
}
func (t Superblock) Checksum() uint32 {
	return binary.LittleEndian.Uint32(t[1020:1024])
}
func (t *Superblock) SetChecksum(val uint32) bool {
	binary.LittleEndian.PutUint32(t[1020:1024], val)
	return true
}
func (t Superblock) BlocksCount() uint64 {
	return join_uint32_uint32(t.BlocksCountLo(), t.BlocksCountHi())
}
func (t *Superblock) SetBlocksCount(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetBlocksCountLo(a)
	t.SetBlocksCountHi(b)
	return true
}
func (t Superblock) RBlocksCount() uint64 {
	return join_uint32_uint32(t.RBlocksCountLo(), t.RBlocksCountHi())
}
func (t *Superblock) SetRBlocksCount(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetRBlocksCountLo(a)
	t.SetRBlocksCountHi(b)
	return true
}
func (t Superblock) FreeBlocksCount() uint64 {
	return join_uint32_uint32(t.FreeBlocksCountLo(), t.FreeBlocksCountHi())
}
func (t *Superblock) SetFreeBlocksCount(val uint64) bool {
	var a, b = split_uint32_uint32(val)
	t.SetFreeBlocksCountLo(a)
	t.SetFreeBlocksCountHi(b)
	return true
}
func (t Superblock) Size() int64 {
	return 1024
}
func (t Superblock) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *Superblock) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t Superblock) String() string {
	return strings.Join([]string{"Superblock{", fmt.Sprintf("inodes_count=%v", t.InodesCount()), fmt.Sprintf("blocks_count_lo=%v", t.BlocksCountLo()), fmt.Sprintf("r_blocks_count_lo=%v", t.RBlocksCountLo()), fmt.Sprintf("free_blocks_count_lo=%v", t.FreeBlocksCountLo()), fmt.Sprintf("free_inodes_count=%v", t.FreeInodesCount()), fmt.Sprintf("first_data_block=%v", t.FirstDataBlock()), fmt.Sprintf("log_block_size=%v", t.LogBlockSize()), fmt.Sprintf("log_cluster_size=%v", t.LogClusterSize()), fmt.Sprintf("blocks_per_group=%v", t.BlocksPerGroup()), fmt.Sprintf("clusters_per_group=%v", t.ClustersPerGroup()), fmt.Sprintf("inodes_per_group=%v", t.InodesPerGroup()), fmt.Sprintf("mtime=%v", t.Mtime()), fmt.Sprintf("wtime=%v", t.Wtime()), fmt.Sprintf("mnt_count=%v", t.MntCount()), fmt.Sprintf("max_mnt_count=%v", t.MaxMntCount()), fmt.Sprintf("magic=%v", t.Magic()), fmt.Sprintf("state=%v", t.State()), fmt.Sprintf("errors=%v", t.Errors()), fmt.Sprintf("minor_rev_level=%v", t.MinorRevLevel()), fmt.Sprintf("lastcheck=%v", t.Lastcheck()), fmt.Sprintf("checkinterval=%v", t.Checkinterval()), fmt.Sprintf("creator_os=%v", t.CreatorOs()), fmt.Sprintf("rev_level=%v", t.RevLevel()), fmt.Sprintf("def_resuid=%v", t.DefResuid()), fmt.Sprintf("def_resgid=%v", t.DefResgid()), fmt.Sprintf("first_ino=%v", t.FirstIno()), fmt.Sprintf("inode_size=%v", t.InodeSize()), fmt.Sprintf("block_group_nr=%v", t.BlockGroupNr()), fmt.Sprintf("feature_compat=%v", t.FeatureCompat()), fmt.Sprintf("feature_incompat=%v", t.FeatureIncompat()), fmt.Sprintf("feature_ro_compat=%v", t.FeatureRoCompat()), fmt.Sprintf("algorithm_usage_bitmap=%v", t.AlgorithmUsageBitmap()), fmt.Sprintf("prealloc_blocks=%v", t.PreallocBlocks()), fmt.Sprintf("prealloc_dir_blocks=%v", t.PreallocDirBlocks()), fmt.Sprintf("reserved_gdt_blocks=%v", t.ReservedGdtBlocks()), fmt.Sprintf("journal_inum=%v", t.JournalInum()), fmt.Sprintf("journal_dev=%v", t.JournalDev()), fmt.Sprintf("last_orphan=%v", t.LastOrphan()), fmt.Sprintf("def_hash_version=%v", t.DefHashVersion()), fmt.Sprintf("jnl_backup_type=%v", t.JnlBackupType()), fmt.Sprintf("desc_size=%v", t.DescSize()), fmt.Sprintf("s_default_mount_opts=%v", t.SDefaultMountOpts()), fmt.Sprintf("first_meta_bg=%v", t.FirstMetaBg()), fmt.Sprintf("mkfs_time=%v", t.MkfsTime()), fmt.Sprintf("blocks_count_hi=%v", t.BlocksCountHi()), fmt.Sprintf("r_blocks_count_hi=%v", t.RBlocksCountHi()), fmt.Sprintf("free_blocks_count_hi=%v", t.FreeBlocksCountHi()), fmt.Sprintf("min_extra_isize=%v", t.MinExtraIsize()), fmt.Sprintf("want_extra_isize=%v", t.WantExtraIsize()), fmt.Sprintf("flags=%v", t.Flags()), fmt.Sprintf("raid_stride=%v", t.RaidStride()), fmt.Sprintf("mmp_update_interval=%v", t.MmpUpdateInterval()), fmt.Sprintf("mmp_block=%v", t.MmpBlock()), fmt.Sprintf("raid_stripe_width=%v", t.RaidStripeWidth()), fmt.Sprintf("log_groups_per_flex=%v", t.LogGroupsPerFlex()), fmt.Sprintf("checksum_type=%v", t.ChecksumType()), fmt.Sprintf("encryption_level=%v", t.EncryptionLevel()), fmt.Sprintf("reserved_pad=%v", t.ReservedPad()), fmt.Sprintf("kbytes_written=%v", t.KbytesWritten()), fmt.Sprintf("snapshot_inum=%v", t.SnapshotInum()), fmt.Sprintf("snapshot_id=%v", t.SnapshotId()), fmt.Sprintf("snapshot_r_blocks_count=%v", t.SnapshotRBlocksCount()), fmt.Sprintf("snapshot_list=%v", t.SnapshotList()), fmt.Sprintf("error_count=%v", t.ErrorCount()), fmt.Sprintf("first_error_time=%v", t.FirstErrorTime()), fmt.Sprintf("first_error_ino=%v", t.FirstErrorIno()), fmt.Sprintf("first_error_block=%v", t.FirstErrorBlock()), fmt.Sprintf("first_error_line=%v", t.FirstErrorLine()), fmt.Sprintf("last_error_time=%v", t.LastErrorTime()), fmt.Sprintf("last_error_ino=%v", t.LastErrorIno()), fmt.Sprintf("last_error_line=%v", t.LastErrorLine()), fmt.Sprintf("last_error_block=%v", t.LastErrorBlock()), fmt.Sprintf("usr_quota_inum=%v", t.UsrQuotaInum()), fmt.Sprintf("grp_quota_inum=%v", t.GrpQuotaInum()), fmt.Sprintf("overhead_clusters=%v", t.OverheadClusters()), fmt.Sprintf("lpf_ino=%v", t.LpfIno()), fmt.Sprintf("prj_quota_inum=%v", t.PrjQuotaInum()), fmt.Sprintf("checksum_seed=%v", t.ChecksumSeed()), fmt.Sprintf("wtime_hi=%v", t.WtimeHi()), fmt.Sprintf("mtime_hi=%v", t.MtimeHi()), fmt.Sprintf("mkfs_time_hi=%v", t.MkfsTimeHi()), fmt.Sprintf("lastcheck_hi=%v", t.LastcheckHi()), fmt.Sprintf("first_error_time_hi=%v", t.FirstErrorTimeHi()), fmt.Sprintf("last_error_time_hi=%v", t.LastErrorTimeHi()), fmt.Sprintf("first_error_errcode=%v", t.FirstErrorErrcode()), fmt.Sprintf("last_error_errcode=%v", t.LastErrorErrcode()), fmt.Sprintf("encoding=%v", t.Encoding()), fmt.Sprintf("encoding_flags=%v", t.EncodingFlags()), fmt.Sprintf("orphan_file_inum=%v", t.OrphanFileInum()), fmt.Sprintf("checksum=%v", t.Checksum()), "}"}, " ")
}
