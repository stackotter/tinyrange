// autogenerated by structGenerator. DO NOT EDIT.
package fat16

import "encoding/binary"
import "io"
import "strings"
import "fmt"

type BiosParameterBlock [512]byte

func (t BiosParameterBlock) BootJmpLength() int64 {
	return 3
}
func (t BiosParameterBlock) BootJmp(i int) (byte, bool) {
	if i >= 3 {
		return 0, false
	}
	return t[(0 + (i * 1)):(0 + ((i + 1) * 1))][0], true
}
func (t *BiosParameterBlock) SetBootJmp(i int, val byte) bool {
	if i >= 3 {
		return false
	}
	t[(0 + (i * 1)):(0 + ((i + 1) * 1))][0] = val
	return true
}
func (t BiosParameterBlock) OemIdentifierLength() int64 {
	return 8
}
func (t BiosParameterBlock) OemIdentifier(i int) (byte, bool) {
	if i >= 8 {
		return 0, false
	}
	return t[(3 + (i * 1)):(3 + ((i + 1) * 1))][0], true
}
func (t *BiosParameterBlock) SetOemIdentifier(i int, val byte) bool {
	if i >= 8 {
		return false
	}
	t[(3 + (i * 1)):(3 + ((i + 1) * 1))][0] = val
	return true
}
func (t BiosParameterBlock) BytesPerSector() uint16 {
	return binary.LittleEndian.Uint16(t[11:13])
}
func (t *BiosParameterBlock) SetBytesPerSector(val uint16) bool {
	binary.LittleEndian.PutUint16(t[11:13], val)
	return true
}
func (t BiosParameterBlock) SectorsPerCluster() uint8 {
	return t[13:14][0]
}
func (t *BiosParameterBlock) SetSectorsPerCluster(val uint8) bool {
	t[13:14][0] = val
	return true
}
func (t BiosParameterBlock) ReservedSectors() uint16 {
	return binary.LittleEndian.Uint16(t[14:16])
}
func (t *BiosParameterBlock) SetReservedSectors(val uint16) bool {
	binary.LittleEndian.PutUint16(t[14:16], val)
	return true
}
func (t BiosParameterBlock) FatCount() uint8 {
	return t[16:17][0]
}
func (t *BiosParameterBlock) SetFatCount(val uint8) bool {
	t[16:17][0] = val
	return true
}
func (t BiosParameterBlock) RootDirectoryEntries() uint16 {
	return binary.LittleEndian.Uint16(t[17:19])
}
func (t *BiosParameterBlock) SetRootDirectoryEntries(val uint16) bool {
	binary.LittleEndian.PutUint16(t[17:19], val)
	return true
}
func (t BiosParameterBlock) TotalSectors16() uint16 {
	return binary.LittleEndian.Uint16(t[19:21])
}
func (t *BiosParameterBlock) SetTotalSectors16(val uint16) bool {
	binary.LittleEndian.PutUint16(t[19:21], val)
	return true
}
func (t BiosParameterBlock) MediaDescriptorType() uint8 {
	return t[21:22][0]
}
func (t *BiosParameterBlock) SetMediaDescriptorType(val uint8) bool {
	t[21:22][0] = val
	return true
}
func (t BiosParameterBlock) TableSize16() uint16 {
	return binary.LittleEndian.Uint16(t[22:24])
}
func (t *BiosParameterBlock) SetTableSize16(val uint16) bool {
	binary.LittleEndian.PutUint16(t[22:24], val)
	return true
}
func (t BiosParameterBlock) SectorsPerTrack() uint16 {
	return binary.LittleEndian.Uint16(t[24:26])
}
func (t *BiosParameterBlock) SetSectorsPerTrack(val uint16) bool {
	binary.LittleEndian.PutUint16(t[24:26], val)
	return true
}
func (t BiosParameterBlock) HeadSideCount() uint16 {
	return binary.LittleEndian.Uint16(t[26:28])
}
func (t *BiosParameterBlock) SetHeadSideCount(val uint16) bool {
	binary.LittleEndian.PutUint16(t[26:28], val)
	return true
}
func (t BiosParameterBlock) HiddenSectors() uint32 {
	return binary.LittleEndian.Uint32(t[28:32])
}
func (t *BiosParameterBlock) SetHiddenSectors(val uint32) bool {
	binary.LittleEndian.PutUint32(t[28:32], val)
	return true
}
func (t BiosParameterBlock) TotalSectors32() uint32 {
	return binary.LittleEndian.Uint32(t[32:36])
}
func (t *BiosParameterBlock) SetTotalSectors32(val uint32) bool {
	binary.LittleEndian.PutUint32(t[32:36], val)
	return true
}
func (t BiosParameterBlock) DriveNumber() uint8 {
	return t[36:37][0]
}
func (t *BiosParameterBlock) SetDriveNumber(val uint8) bool {
	t[36:37][0] = val
	return true
}
func (t BiosParameterBlock) Reserved() uint8 {
	return t[37:38][0]
}
func (t *BiosParameterBlock) SetReserved(val uint8) bool {
	t[37:38][0] = val
	return true
}
func (t BiosParameterBlock) Signature() uint8 {
	return t[38:39][0]
}
func (t *BiosParameterBlock) SetSignature(val uint8) bool {
	t[38:39][0] = val
	return true
}
func (t BiosParameterBlock) VolumeId() uint32 {
	return binary.LittleEndian.Uint32(t[39:43])
}
func (t *BiosParameterBlock) SetVolumeId(val uint32) bool {
	binary.LittleEndian.PutUint32(t[39:43], val)
	return true
}
func (t BiosParameterBlock) VolumeLabelLength() int64 {
	return 11
}
func (t BiosParameterBlock) VolumeLabel(i int) (byte, bool) {
	if i >= 11 {
		return 0, false
	}
	return t[(43 + (i * 1)):(43 + ((i + 1) * 1))][0], true
}
func (t *BiosParameterBlock) SetVolumeLabel(i int, val byte) bool {
	if i >= 11 {
		return false
	}
	t[(43 + (i * 1)):(43 + ((i + 1) * 1))][0] = val
	return true
}
func (t BiosParameterBlock) SystemIdentifierLength() int64 {
	return 8
}
func (t BiosParameterBlock) SystemIdentifier(i int) (byte, bool) {
	if i >= 8 {
		return 0, false
	}
	return t[(54 + (i * 1)):(54 + ((i + 1) * 1))][0], true
}
func (t *BiosParameterBlock) SetSystemIdentifier(i int, val byte) bool {
	if i >= 8 {
		return false
	}
	t[(54 + (i * 1)):(54 + ((i + 1) * 1))][0] = val
	return true
}
func (t BiosParameterBlock) BootCodeLength() int64 {
	return 448
}
func (t BiosParameterBlock) BootCode(i int) (byte, bool) {
	if i >= 448 {
		return 0, false
	}
	return t[(62 + (i * 1)):(62 + ((i + 1) * 1))][0], true
}
func (t *BiosParameterBlock) SetBootCode(i int, val byte) bool {
	if i >= 448 {
		return false
	}
	t[(62 + (i * 1)):(62 + ((i + 1) * 1))][0] = val
	return true
}
func (t BiosParameterBlock) BootablePartitionSignature() uint16 {
	return binary.LittleEndian.Uint16(t[510:512])
}
func (t *BiosParameterBlock) SetBootablePartitionSignature(val uint16) bool {
	binary.LittleEndian.PutUint16(t[510:512], val)
	return true
}
func (t BiosParameterBlock) Size() int64 {
	return 512
}
func (t BiosParameterBlock) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *BiosParameterBlock) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t BiosParameterBlock) String() string {
	return strings.Join([]string{"BiosParameterBlock{", fmt.Sprintf("bytesPerSector=%v", t.BytesPerSector()), fmt.Sprintf("sectorsPerCluster=%v", t.SectorsPerCluster()), fmt.Sprintf("reservedSectors=%v", t.ReservedSectors()), fmt.Sprintf("fatCount=%v", t.FatCount()), fmt.Sprintf("rootDirectoryEntries=%v", t.RootDirectoryEntries()), fmt.Sprintf("totalSectors16=%v", t.TotalSectors16()), fmt.Sprintf("mediaDescriptorType=%v", t.MediaDescriptorType()), fmt.Sprintf("tableSize16=%v", t.TableSize16()), fmt.Sprintf("sectorsPerTrack=%v", t.SectorsPerTrack()), fmt.Sprintf("headSideCount=%v", t.HeadSideCount()), fmt.Sprintf("hiddenSectors=%v", t.HiddenSectors()), fmt.Sprintf("totalSectors32=%v", t.TotalSectors32()), fmt.Sprintf("driveNumber=%v", t.DriveNumber()), fmt.Sprintf("reserved=%v", t.Reserved()), fmt.Sprintf("signature=%v", t.Signature()), fmt.Sprintf("volumeId=%v", t.VolumeId()), fmt.Sprintf("bootablePartitionSignature=%v", t.BootablePartitionSignature()), "}"}, " ")
}

type DirectoryRecord [32]byte

func (t DirectoryRecord) FilenameLength() int64 {
	return 8
}
func (t DirectoryRecord) Filename(i int) (byte, bool) {
	if i >= 8 {
		return 0, false
	}
	return t[(0 + (i * 1)):(0 + ((i + 1) * 1))][0], true
}
func (t *DirectoryRecord) SetFilename(i int, val byte) bool {
	if i >= 8 {
		return false
	}
	t[(0 + (i * 1)):(0 + ((i + 1) * 1))][0] = val
	return true
}
func (t DirectoryRecord) ExtLength() int64 {
	return 3
}
func (t DirectoryRecord) Ext(i int) (byte, bool) {
	if i >= 3 {
		return 0, false
	}
	return t[(8 + (i * 1)):(8 + ((i + 1) * 1))][0], true
}
func (t *DirectoryRecord) SetExt(i int, val byte) bool {
	if i >= 3 {
		return false
	}
	t[(8 + (i * 1)):(8 + ((i + 1) * 1))][0] = val
	return true
}
func (t DirectoryRecord) Attributes() uint8 {
	return t[11:12][0]
}
func (t *DirectoryRecord) SetAttributes(val uint8) bool {
	t[11:12][0] = val
	return true
}
func (t DirectoryRecord) Reserved() uint8 {
	return t[12:13][0]
}
func (t *DirectoryRecord) SetReserved(val uint8) bool {
	t[12:13][0] = val
	return true
}
func (t DirectoryRecord) CreationTimeSeconds() uint8 {
	return t[13:14][0]
}
func (t *DirectoryRecord) SetCreationTimeSeconds(val uint8) bool {
	t[13:14][0] = val
	return true
}
func (t DirectoryRecord) CreationTime() uint16 {
	return binary.LittleEndian.Uint16(t[14:16])
}
func (t *DirectoryRecord) SetCreationTime(val uint16) bool {
	binary.LittleEndian.PutUint16(t[14:16], val)
	return true
}
func (t DirectoryRecord) CreationDate() uint16 {
	return binary.LittleEndian.Uint16(t[16:18])
}
func (t *DirectoryRecord) SetCreationDate(val uint16) bool {
	binary.LittleEndian.PutUint16(t[16:18], val)
	return true
}
func (t DirectoryRecord) LastAccessedDate() uint16 {
	return binary.LittleEndian.Uint16(t[18:20])
}
func (t *DirectoryRecord) SetLastAccessedDate(val uint16) bool {
	binary.LittleEndian.PutUint16(t[18:20], val)
	return true
}
func (t DirectoryRecord) FirstClusterNumberHigh() uint16 {
	return binary.LittleEndian.Uint16(t[20:22])
}
func (t *DirectoryRecord) SetFirstClusterNumberHigh(val uint16) bool {
	binary.LittleEndian.PutUint16(t[20:22], val)
	return true
}
func (t DirectoryRecord) LastModificationTime() uint16 {
	return binary.LittleEndian.Uint16(t[22:24])
}
func (t *DirectoryRecord) SetLastModificationTime(val uint16) bool {
	binary.LittleEndian.PutUint16(t[22:24], val)
	return true
}
func (t DirectoryRecord) LastModificationDate() uint16 {
	return binary.LittleEndian.Uint16(t[24:26])
}
func (t *DirectoryRecord) SetLastModificationDate(val uint16) bool {
	binary.LittleEndian.PutUint16(t[24:26], val)
	return true
}
func (t DirectoryRecord) FirstClusterNumberLow() uint16 {
	return binary.LittleEndian.Uint16(t[26:28])
}
func (t *DirectoryRecord) SetFirstClusterNumberLow(val uint16) bool {
	binary.LittleEndian.PutUint16(t[26:28], val)
	return true
}
func (t DirectoryRecord) FileSize() uint32 {
	return binary.LittleEndian.Uint32(t[28:32])
}
func (t *DirectoryRecord) SetFileSize(val uint32) bool {
	binary.LittleEndian.PutUint32(t[28:32], val)
	return true
}
func (t DirectoryRecord) FirstClusterNumber() uint32 {
	return join_uint16_uint16(t.FirstClusterNumberLow(), t.FirstClusterNumberHigh())
}
func (t *DirectoryRecord) SetFirstClusterNumber(val uint32) bool {
	var a, b = split_uint16_uint16(val)
	t.SetFirstClusterNumberLow(a)
	t.SetFirstClusterNumberHigh(b)
	return true
}
func (t DirectoryRecord) Size() int64 {
	return 32
}
func (t DirectoryRecord) ReadAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(p, t[off:]), nil
}
func (t *DirectoryRecord) WriteAt(p []byte, off int64) (int, error) {
	if off > t.Size() {
		return 0, io.EOF
	}
	return copy(t[off:], p), nil
}
func (t DirectoryRecord) String() string {
	return strings.Join([]string{"DirectoryRecord{", fmt.Sprintf("attributes=%v", t.Attributes()), fmt.Sprintf("reserved=%v", t.Reserved()), fmt.Sprintf("creationTimeSeconds=%v", t.CreationTimeSeconds()), fmt.Sprintf("creationTime=%v", t.CreationTime()), fmt.Sprintf("creationDate=%v", t.CreationDate()), fmt.Sprintf("lastAccessedDate=%v", t.LastAccessedDate()), fmt.Sprintf("firstClusterNumberHigh=%v", t.FirstClusterNumberHigh()), fmt.Sprintf("lastModificationTime=%v", t.LastModificationTime()), fmt.Sprintf("lastModificationDate=%v", t.LastModificationDate()), fmt.Sprintf("firstClusterNumberLow=%v", t.FirstClusterNumberLow()), fmt.Sprintf("fileSize=%v", t.FileSize()), "}"}, " ")
}
